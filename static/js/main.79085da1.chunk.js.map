{"version":3,"sources":["components/Header.jsx","lib/Time.js","components/Display.jsx","components/Keypad.jsx","components/Controls.jsx","components/Timer.jsx","components/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","style","height","Time","currentTime","this","formatUnitOfTime","Math","floor","unitOfTime","concat","substring","toString","Display","props","time","status","type","placeholder","value","hours","maxLength","onFocus","onFocusChange","minutes","onChange","onInputChange","seconds","getTimeDisplay","Keypad","onClick","Controls","onStart","disabled","canStart","onResume","onStop","onReset","Timer","state","initialState","handleKeyPadClick","val","_this","timeUnit","setHours","setMinutes","setSeconds","handleFocusChange","setState","prevState","parseInt","handleStart","startTimer","timeMilli","interval","setInterval","clearInterval","handleResume","handleStop","handleReset","hour","_this2","formatTime","minute","_this3","slice","length","second","_this4","components_Display","components_Keypad","components_Controls","Component","App","components_Header","components_Timer","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAaeA,EAXA,kBACXC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAA8BC,MAAO,CAACC,OAAO,UACxDL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,kDACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BAAf,mBCPKG,sHACFC,GASX,OAPYC,KAAKC,iBAAiBC,KAAKC,MAAOJ,EAAW,MAAZ,OAKvB,IAJRC,KAAKC,iBAAiBC,KAAKC,MAAOJ,EAAW,KAAZ,MAIT,IAHxBC,KAAKC,iBAAiBC,KAAKC,MAAOJ,EAAW,IAAkB,MAGvB,IAFnCC,KAAKC,iBAAiBC,KAAKC,MAAOJ,EAAe,IAAS,8CAOhEK,GACb,OAAOA,EAAa,GAAK,IAAAC,OAAID,GAAaE,UAAU,EAAE,GAAKF,EAAWG,WAAWD,UAAU,EAAE,aCqDtFE,EA/DC,SAACC,GACb,IAAIC,EAAO,IAAIZ,EACf,OACIN,EAAAC,EAAAC,cAAA,WAEyB,OAAjBe,EAAME,QACNnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,iBAA7B,KACAH,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,iBAA7B,KACAH,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,iBAA7B,MAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kDACXH,EAAAC,EAAAC,cAAA,SACIkB,KAAK,OACLjB,UAAU,wCACVkB,YAAY,KACZC,MAAOL,EAAMM,MACbC,UAAW,EACXC,QAAS,kBAAMR,EAAMS,cAAc,SAGvC1B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2BAAhB,KACAH,EAAAC,EAAAC,cAAA,SACIkB,KAAK,OACLjB,UAAU,0CACVkB,YAAY,KACZC,MAAOL,EAAMU,QACbH,UAAW,EACXC,QAAS,kBAAKR,EAAMS,cAAc,OAClCE,SAAUX,EAAMY,gBAEpB7B,EAAAC,EAAAC,cAAA,QAAMC,UAAU,2BAAhB,KACAH,EAAAC,EAAAC,cAAA,SACIkB,KAAK,OACLjB,UAAU,0CACVkB,YAAY,KACZC,MAAOL,EAAMa,QACbN,UAAW,EACXC,QAAS,kBAAKR,EAAMS,cAAc,OAClCE,SAAUX,EAAMY,kBAMX,OAAjBZ,EAAME,QACNnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,2BAA7B,KACAH,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,2BAA7B,KACAH,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,2BAA7B,KACAH,EAAAC,EAAAC,cAAA,SAAOkB,KAAK,OAAOjB,UAAU,2BAA7B,OAEJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BACVe,EAAKa,eAAed,EAAMV,iBCxBpCyB,eAhCA,SAACf,GAAD,OACXjB,EAAAC,EAAAC,cAAA,WAEyB,OAAjBe,EAAME,QACNnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,MAEJjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,MAEJjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,MAEJjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,SAAS,KAClEjC,EAAAC,EAAAC,cAAA,KAAGC,UAAU,iBAEjBH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,uBAAuB8B,QAAS,kBAAKhB,EAAMgB,QAAQ,KAArE,KACAjC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAlB,aCQL+B,SAjCE,SAACjB,GAAD,OACbjB,EAAAC,EAAAC,cAAA,WAEyB,OAAjBe,EAAME,OACNnB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,mCACV8B,QAAShB,EAAMkB,QACfC,UAAWnB,EAAMoB,UAFzB,UAOJrC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YAEU,YAAjBc,EAAME,OACNnB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyB8B,QAAShB,EAAMqB,UAA1D,UAIAtC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,wBAAwB8B,QAAShB,EAAMsB,QAAzD,QAKJvC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,yBAAyB8B,QAAShB,EAAMuB,SAA1D,aCrBVC,6MAWFC,MAAQD,EAAME,iBAEdC,kBAAoB,SAACC,GACQ,OAAtBC,EAAKJ,MAAMK,UACVD,EAAKE,SAASH,GAEO,OAAtBC,EAAKJ,MAAMK,UACVD,EAAKG,WAAWJ,GAEK,OAAtBC,EAAKJ,MAAMK,UACVD,EAAKI,WAAWL,GAGpBC,EAAKT,cAGTc,kBAAmB,SAACN,GAChBC,EAAKM,SAAS,iBAAO,CAACL,SAAUF,QA6DpCR,SAAW,WACPS,EAAKM,SAAS,SAACC,GAAD,MAAgB,CAAEhB,SACxB,YADmCgB,EAAUlC,SAC/BmC,SAASD,EAAU9B,OAAS,GAC1B+B,SAASD,EAAU1B,SAAW,GAC9B2B,SAASD,EAAUvB,SAAW,SAG1DyB,YAAc,WACVT,EAAKU,gBAGTA,WAAa,WACTV,EAAKM,SAAS,CAACjC,OAAQ,YAEvB,IAAMsC,EAE2C,KAFH,GAA3BH,SAASR,EAAKJ,MAAMnB,OAAU,GACD,GAA7B+B,SAASR,EAAKJ,MAAMf,SACpB2B,SAASR,EAAKJ,MAAMZ,UAEvCgB,EAAKM,SAAS,CAAE7C,YAAa+C,SAASG,KAEtCX,EAAKY,SAAWC,YAAY,WAExBb,EAAKM,SAAS,SAACC,GAAD,MAAgB,CAC1B9C,YAAa8C,EAAU9C,YAAa,MAGV,IAA3BuC,EAAKJ,MAAMnC,cACVqD,cAAcd,EAAKY,UACnBZ,EAAKM,SAAS,CAAEjC,OAAS,SAE/B,OAGN0C,aAAe,WACXf,EAAKY,SAAWC,YAAY,WAExBb,EAAKM,SAAS,SAACC,GAAD,MAAgB,CAC1BlC,OAAQ,UACRZ,YAAa8C,EAAU9C,YAAa,MAGV,IAA3BuC,EAAKJ,MAAMnC,cACVqD,cAAcd,EAAKY,UACnBZ,EAAKM,SAAS,CAAEjC,OAAS,SAE/B,OAGN2C,WAAa,WACTF,cAAcd,EAAKY,UACnBZ,EAAKM,SAAS,CAAEjC,OAAQ,eAG5B4C,YAAc,WACVjB,EAAKM,SAAS,CAAEjC,OAAQ,OACxByC,cAAcd,EAAKY,mFAjHdM,GAAK,IAAAC,EAAAzD,KAEPwD,EAAK,EAEJxD,KAAK4C,SAAS,CAAC7B,MAAO,OAGtBf,KAAK4C,SAAS,SAACC,GAMX,OALAW,EAAOV,SAASW,EAAKC,WAAWb,EAAU9B,MAAQyC,KAE1C,KACJA,EAAOX,EAAU9B,OAEd,CAAEA,MAAO0C,EAAKC,WAAWF,yCAKjCG,GAAO,IAAAC,EAAA5D,KACX2D,EAAO,EAEN3D,KAAK4C,SAAS,CAACzB,QAAS,OAGxBnB,KAAK4C,SAAS,SAACC,GASX,OARAc,EAASb,SAASc,EAAKF,WAAWb,EAAU1B,QAAUwC,KAE5C,IAEDA,EAAO,KACZA,EAASb,SAASa,EAAOpD,WAAWsD,MAAMF,EAAOpD,WAAWuD,OAAQ,KAGhE,CAAC3C,QAASyC,EAAKF,WAAWC,yCAKnCI,GAAO,IAAAC,EAAAhE,KACX+D,EAAO,EAEN/D,KAAK4C,SAAS,CAACtB,QAAS,OAGxBtB,KAAK4C,SAAS,SAACC,GASX,OARAkB,EAASjB,SAASkB,EAAKN,WAAWb,EAAUvB,QAAUyC,KAE5C,IAEDA,EAAO,KACZA,EAASjB,SAASiB,EAAOxD,WAAWsD,MAAME,EAAOxD,WAAWuD,OAAQ,KAGhE,CAACxC,QAAS0C,EAAKN,WAAWK,yCA+DnCrD,GAEP,OADAA,EAAOoC,SAASpC,IACF,GAAK,IAAMA,EAAOA,EAAKH,WAAWsD,MAAMnD,EAAKH,WAAWuD,OAAS,oCAI/E,OACItE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAACuE,EAAD,CACItD,OAAQX,KAAKkC,MAAMvB,OACnBI,MAAOf,KAAKkC,MAAMnB,MAClBI,QAASnB,KAAKkC,MAAMf,QACpBG,QAAStB,KAAKkC,MAAMZ,QACpBvB,YAAaC,KAAKkC,MAAMnC,YACxBmB,cAAelB,KAAK2C,oBAExBnD,EAAAC,EAAAC,cAACwE,EAAD,CACIvD,OAAQX,KAAKkC,MAAMvB,OACnBc,QAASzB,KAAKoC,oBAElB5C,EAAAC,EAAAC,cAACyE,EAAD,CACIxD,OAAQX,KAAKkC,MAAMvB,OACnBkB,SAAU7B,KAAKkC,MAAML,SACrBF,QAAS3B,KAAK+C,YACdjB,SAAU9B,KAAKqD,aACftB,OAAQ/B,KAAKsD,WACbtB,QAAShC,KAAKuD,uBA9KlBa,aAAdnC,EACKE,aAAe,iBAAO,CACzBxB,OAAQ,KACRI,MAAO,KACPI,QAAS,KACTG,QAAS,KACTiB,SAAU,KACVxC,YAAa,KACb8B,SAAU,OA8KHI,QCtKAoC,mLAfX,OACE7E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4E,EAAD,MACA9E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAC6E,EAAD,iBARIH,mBCOEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtF,EAAAC,EAAAC,cAACqF,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.79085da1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <div className=\"navbar navbar-light bg-dark\" style={{height:\"100px\"}}>\r\n        <div className=\"container\">\r\n            <div className=\"row m-auto\">\r\n                <i className=\"fa fa-hourglass-half fa-3x text-light my-auto\"></i>\r\n                <div className=\"text-light h3 ml-3 my-auto\">React Timer</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\n\r\nexport default Header;","export default class Time{\r\n    getTimeDisplay(currentTime){\r\n        \r\n        var hours = this.formatUnitOfTime(Math.floor((currentTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n        var minutes = this.formatUnitOfTime(Math.floor((currentTime % (1000 * 60 * 60)) / (1000 * 60)));\r\n        var seconds = this.formatUnitOfTime(Math.floor((currentTime % (1000 * 60)) / 1000));\r\n        var centiseconds = this.formatUnitOfTime(Math.floor((currentTime % (1000)) / 10));\r\n\r\n        var result =  hours + \":\" + minutes + \":\" + seconds + \":\" + centiseconds;\r\n\r\n        return result;\r\n    }\r\n\r\n    formatUnitOfTime(unitOfTime) {\r\n        return unitOfTime < 10 ? `0${unitOfTime}`.substring(0,2) : unitOfTime.toString().substring(0,2);\r\n    }\r\n}","import React from 'react';\r\nimport '../styles/Display.css';\r\nimport Time from '../lib/Time.js';\r\n\r\nconst Display = (props) => {\r\n    var time = new Time();\r\n    return(\r\n        <div>\r\n            {\r\n                props.status === null &&\r\n                <div className=\"display\">\r\n                    <div>\r\n                        <label type=\"text\" className=\"display-label\">H</label>\r\n                        <label type=\"text\" className=\"display-label\">M</label>\r\n                        <label type=\"text\" className=\"display-label\">S</label>\r\n                    </div>\r\n                    <div className=\"input-group input-group-lg display-input-group\">\r\n                        <input \r\n                            type=\"text\"\r\n                            className=\"form-control display-input disp-hours\"\r\n                            placeholder=\"00\"\r\n                            value={props.hours}\r\n                            maxLength={2}\r\n                            onFocus={() => props.onFocusChange('HH')}\r\n                            //onChange={props.onInputChange}\r\n                        />\r\n                        <span className=\"display-input input-sep\">:</span>\r\n                        <input \r\n                            type=\"text\"\r\n                            className=\"form-control display-input disp-minutes\"\r\n                            placeholder=\"00\"\r\n                            value={props.minutes}\r\n                            maxLength={2}\r\n                            onFocus={()=> props.onFocusChange('MM')}\r\n                            onChange={props.onInputChange}\r\n                        />\r\n                        <span className=\"display-input input-sep\">:</span>\r\n                        <input \r\n                            type=\"text\"\r\n                            className=\"form-control display-input disp-seconds\"\r\n                            placeholder=\"00\"\r\n                            value={props.seconds}\r\n                            maxLength={2}\r\n                            onFocus={()=> props.onFocusChange('SS')}\r\n                            onChange={props.onInputChange}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            }\r\n            {\r\n                props.status !== null &&\r\n                <div className=\"display-countdown\">\r\n                    <div>\r\n                        <label type=\"text\" className=\"display-label-countdown\">H</label>\r\n                        <label type=\"text\" className=\"display-label-countdown\">M</label>\r\n                        <label type=\"text\" className=\"display-label-countdown\">S</label>\r\n                        <label type=\"text\" className=\"display-label-countdown\">CS</label>\r\n                    </div>\r\n                    <div className=\"display-countdown-time\">\r\n                        {time.getTimeDisplay(props.currentTime)}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from 'react';\r\nimport '../styles/Keypad.css';\r\n\r\nconst Keypad = (props) => (\r\n    <div>\r\n        {\r\n            props.status === null &&\r\n            <div className=\"keypad\">\r\n                <div className=\"keypad-row\">\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(1)}>1</button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(2)}>2</button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(3)}>3</button>\r\n                </div>\r\n                <div className=\"keypad-row\">\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(4)}>4</button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(5)}>5</button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(6)}>6</button>\r\n                </div>\r\n                <div className=\"keypad-row\">\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(7)}>7</button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(8)}>8</button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(9)}>9</button>\r\n                </div>\r\n                <div className=\"keypad-row\">\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(-1)}>\r\n                        <i className=\"fa fa-close\"></i>\r\n                    </button>\r\n                    <button className=\"btn btn-light btn-sm\" onClick={()=> props.onClick(0)}>0</button>\r\n                    <button className=\"btn btn-light btn-sm\">&nbsp;</button>\r\n                </div>\r\n            </div>\r\n        }\r\n    </div>\r\n)  \r\n\r\nexport default Keypad;","import React from 'react';\r\nimport '../styles/Controls.css';\r\n\r\nconst Controls = (props) => (\r\n    <div>\r\n        {\r\n            props.status === null ?\r\n            <div className=\"controls\">\r\n                <button className=\"btn btn-success btn-lg btn-block\" \r\n                        onClick={props.onStart}\r\n                        disabled={!props.canStart} >\r\n                    START\r\n                </button>\r\n            </div>\r\n            :\r\n            <div className=\"controls\">\r\n                {\r\n                    props.status === 'STOPPED'?\r\n                    <button className=\"btn btn-success btn-lg\" onClick={props.onResume} >\r\n                        RESUME\r\n                    </button>\r\n                    :\r\n                    <button className=\"btn btn-danger btn-lg\" onClick={props.onStop} >\r\n                        STOP\r\n                    </button>\r\n                }\r\n                \r\n                <button className=\"btn btn-primary btn-lg\" onClick={props.onReset} >\r\n                    RESET\r\n                </button>\r\n            </div>\r\n        }\r\n        \r\n    </div>\r\n)\r\n\r\nexport default Controls;","import React,{Component} from 'react';\r\nimport Display from './Display';\r\nimport '../styles/Timer.css';\r\nimport Keypad from './Keypad';\r\nimport Controls from './Controls';\r\n\r\nclass Timer extends Component {\r\n    static initialState = () => ({\r\n        status: null,\r\n        hours: '00',\r\n        minutes: '00',\r\n        seconds: '00',\r\n        timeUnit: null,\r\n        currentTime: null,\r\n        canStart: null\r\n    })\r\n\r\n    state = Timer.initialState();\r\n\r\n    handleKeyPadClick = (val) => {\r\n        if(this.state.timeUnit==='HH'){\r\n            this.setHours(val);\r\n        }\r\n        if(this.state.timeUnit==='MM'){\r\n            this.setMinutes(val);\r\n        }\r\n        if(this.state.timeUnit==='SS'){\r\n            this.setSeconds(val);\r\n        }\r\n\r\n        this.canStart();\r\n    }\r\n\r\n    handleFocusChange =(val) => {\r\n        this.setState(() => ({timeUnit: val}))\r\n    }\r\n\r\n    setHours(hour){\r\n\r\n        if(hour<0){\r\n\r\n            this.setState({hours: '00'});\r\n\r\n        }else{\r\n            this.setState((prevState)=>{\r\n                hour = parseInt(this.formatTime(prevState.hours + hour));\r\n\r\n                if(hour>99){\r\n                    hour = prevState.hours;\r\n                }\r\n                return({ hours: this.formatTime(hour) })\r\n            })\r\n        }\r\n    }\r\n\r\n    setMinutes(minute){\r\n        if(minute<0){\r\n\r\n            this.setState({minutes: '00'});\r\n\r\n        }else{\r\n            this.setState((prevState) => {\r\n                minute = parseInt(this.formatTime(prevState.minutes + minute));\r\n\r\n                if(minute<60){\r\n                    \r\n                }else if(minute>59){\r\n                    minute = parseInt(minute.toString().slice(minute.toString().length -1));\r\n                }\r\n\r\n                return ({minutes: this.formatTime(minute)});\r\n            })\r\n        }\r\n    }\r\n\r\n    setSeconds(second){\r\n        if(second<0){\r\n\r\n            this.setState({seconds: '00'});\r\n\r\n        }else{\r\n            this.setState((prevState) => {\r\n                second = parseInt(this.formatTime(prevState.seconds + second));\r\n\r\n                if(second<60){\r\n                    \r\n                }else if(second>59){\r\n                    second = parseInt(second.toString().slice(second.toString().length -1));\r\n                }\r\n\r\n                return ({seconds: this.formatTime(second)});\r\n            })\r\n        }\r\n    }\r\n\r\n    canStart = () => {\r\n        this.setState((prevState) => ({ canStart : prevState.status \r\n            !== 'STARTED' && (parseInt(prevState.hours) > 0\r\n                             || parseInt(prevState.minutes) > 0\r\n                             || parseInt(prevState.seconds) > 0) }))\r\n    }\r\n\r\n    handleStart = () => {\r\n        this.startTimer();\r\n    }\r\n\r\n    startTimer = () => {\r\n        this.setState({status: 'STARTED'});\r\n\r\n        const timeMilli = (parseInt(this.state.hours)*60*60 + \r\n                           parseInt(this.state.minutes)*60 +\r\n                           parseInt(this.state.seconds))*1000;\r\n        \r\n        this.setState({ currentTime: parseInt(timeMilli)})\r\n        \r\n        this.interval = setInterval(() => {\r\n\r\n            this.setState((prevState) => ({\r\n                currentTime: prevState.currentTime -10\r\n            }))\r\n\r\n            if(this.state.currentTime === 0){\r\n                clearInterval(this.interval);\r\n                this.setState({ status : null})\r\n            }\r\n        },10)\r\n    }\r\n\r\n    handleResume = () => {\r\n        this.interval = setInterval(() => {\r\n\r\n            this.setState((prevState) => ({\r\n                status: 'STARTED',\r\n                currentTime: prevState.currentTime -10\r\n            }))\r\n\r\n            if(this.state.currentTime === 0){\r\n                clearInterval(this.interval);\r\n                this.setState({ status : null})\r\n            }\r\n        },10)\r\n    }\r\n\r\n    handleStop = () => {\r\n        clearInterval(this.interval);\r\n        this.setState({ status: 'STOPPED'});\r\n    }\r\n\r\n    handleReset = () => {\r\n        this.setState({ status: null});\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    formatTime(time) {\r\n        time = parseInt(time);\r\n        return time < 10 ? '0' + time : time.toString().slice(time.toString().length - 2);\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"d-flex flex-row\">\r\n                <div className=\"timer\">\r\n                    <Display \r\n                        status={this.state.status}\r\n                        hours={this.state.hours}\r\n                        minutes={this.state.minutes}\r\n                        seconds={this.state.seconds}\r\n                        currentTime={this.state.currentTime}\r\n                        onFocusChange={this.handleFocusChange} \r\n                    />\r\n                    <Keypad \r\n                        status={this.state.status}\r\n                        onClick={this.handleKeyPadClick} \r\n                    />\r\n                    <Controls \r\n                        status={this.state.status}\r\n                        canStart={this.state.canStart}\r\n                        onStart={this.handleStart}\r\n                        onResume={this.handleResume}\r\n                        onStop={this.handleStop}\r\n                        onReset={this.handleReset}\r\n                    />\r\n                </div>  \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Timer;","import React, { Component } from 'react';\nimport Header from './Header.jsx';\nimport '../styles/bootstrap.min.css';\nimport Timer from './Timer.jsx';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"container mt-5\">\n          <div className=\"d-flex flex-row\">\n            <div className=\"col-md-4 mx-auto\">\n              <Timer />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport '../node_modules/font-awesome/css/font-awesome.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}